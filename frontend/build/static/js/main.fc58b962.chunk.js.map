{"version":3,"sources":["logo.svg","components/UI/Button/button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","button","props","console","log","text","name","status","type","className","onClick","e","clicked","App","state","serverConnected","apiResponse","fetch","then","res","newState","JSON","parse","setState","catch","err","this","callAPI","valveName","setTimeout","timer","axios","get","countdownHandler","src","logo","alt","valve1","handleButtonClick","valve2","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,iOCgB5BC,G,MAZA,SAACC,GACdC,QAAQC,IAAIF,GACZ,IAAIG,EAAOH,EAAMI,KAMjB,OALIJ,EAAMK,OACRF,GAAQ,SAERA,GAAO,UAGP,4BAAQG,KAAK,SAASC,UAAU,MAAMC,QAAS,SAAAC,GAAC,OAAIT,EAAMU,QAAQD,EAAG,YAAYN,K,iBC+CtEQ,E,4MAnDXC,MAAQ,CACFC,iBAAiB,EACjBC,YAAa,sC,wDAIR,IAAD,OACRb,QAAQC,IAAI,cACVa,MAAM,6BACDC,MAAK,SAAAC,GAAG,OAAIA,EAAId,UAChBa,MAAK,SAAAC,GACJ,IAAIC,EAAWC,KAAKC,MAAMH,GAC1B,EAAKI,SAAL,2BAAkBH,GAAlB,IAA4BJ,YAAa,mBAAoBD,iBAAiB,QAE/ES,OAAM,SAAAC,GAAG,OAAIA,O,0CAGlBC,KAAKC,Y,uCAEQC,GAAY,IAAD,OAC1BC,YAAW,kBAAM,EAAKN,SAAL,eAAgBK,GAAW,MAASF,KAAKZ,MAAMgB,S,wCAGhDnB,EAAGiB,GAAY,IAAD,OAC9BG,IAAMC,IAAN,gCAAmCJ,IAClCV,KAAKQ,KAAKH,SAAL,eAAgBK,GAAaF,KAAKZ,MAAMc,KAAa,kBAAMzB,QAAQC,IAAI,EAAKU,MAAMc,QACvFV,KAAKQ,KAAKO,iBAAiBL,M,+BAIpB,IAAD,OACL,OACI,yBAAKnB,UAAU,OACX,4BAAQA,UAAU,cAClB,yBAAKyB,IAAKC,IAAM1B,UAAU,WAAW2B,IAAI,SACrC,wBAAI3B,UAAU,aAAd,kCAGJ,wBAAIA,UAAY,aAAaiB,KAAKZ,MAAME,aAExC,yBAAKP,UAAW,aACb,kBAAC,EAAD,CAAQH,KAAM,UAAWC,OAAUmB,KAAKZ,MAAMuB,OAAQzB,QAAW,SAAAD,GAAC,OAAI,EAAK2B,kBAAkB3B,EAAG,aAChG,kBAAC,EAAD,CAAQL,KAAM,UAAWC,OAAUmB,KAAKZ,MAAMyB,OAAQ3B,QAAW,SAAAD,GAAC,OAAI,EAAK2B,kBAAkB3B,EAAG,cAGnG,4BAAQF,UAAU,UAAlB,wD,GA9CE+B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.fc58b962.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n\r\n\r\nconst button = (props) => {\r\n  console.log(props);\r\n  let text = props.name\r\n  if (props.status) {\r\n    text += \" is ON\" \r\n  } else {\r\n    text+= \" is OFF\"\r\n  }\r\n  return (\r\n    <button type=\"button\" className=\"btn\" onClick={e => props.clicked(e, \"valve2\")}>{text}</button>\r\n  )};\r\n\r\nexport default button","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Button from \"./components/UI/Button/button.js\";\n\nimport axios from 'axios';\n\nclass App extends Component {          \n    state = {\n          serverConnected: false,\n          apiResponse: \"Hi there, server not connected....\", \n          };\n    \n\n    callAPI() {\n      console.log(\"api called\")\n        fetch(\"http://localhost:9000/api\")            \n            .then(res => res.text())\n            .then(res => {\n              let newState = JSON.parse(res);\n              this.setState({...newState, apiResponse: \"Server Connected\", serverConnected: true})              \n            })\n            .catch(err => err);\n    }\n    componentDidMount() {\n        this.callAPI();\n    } \n    countdownHandler(valveName) {\n      setTimeout(() => this.setState({[valveName]:false}), this.state.timer)\n    }   \n\n    handleButtonClick(e, valveName) {    \n      axios.get(`http://localhost:9000/${valveName}`)\n      .then(this.setState({[valveName]: !this.state[valveName]}, () => console.log(this.state[valveName])))\n      .then(this.countdownHandler(valveName));\n    }\n  \n\n    render() {     \n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <h1 className=\"App-title\">Welcome to the Control System</h1>                        \n                </header>\n\n                <h2 className = \"App-intro\">{this.state.apiResponse}</h2>\n\n                <div className= \"btn-group\">                  \n                   <Button name={\"Valve 1\"} status = {this.state.valve1} clicked = {e => this.handleButtonClick(e, \"valve1\")}/>\n                   <Button name={\"Valve 2\"} status = {this.state.valve2} clicked = {e => this.handleButtonClick(e, \"valve2\")}/>\n                </div>\n              \n                <footer className=\"footer\">Created 2020, Patrik Mackerle, version 0.1 ALFA</footer>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}